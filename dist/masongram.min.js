"use strict";window.masongram=$.fn.masongram=function(t){return this.each(function(){new Masongram(this,t)})};var Masongram=function(){function t(t,n){var o=this;i.forEach(function(t){o.require(t)}),c||(this.configure(n),this.setup(t))}var n,o,e,a,i=["jQuery","Masonry"],c=!1;return t.prototype={require:function(t){var n=void 0!==window[t];return n||(c=!0,console.error("Dependency unavailable: "+t)),n},configure:function(t){n=$.extend(!0,{endpoint:"users/self",loop:!1,count:10,offset:10,size:"low_resolution",caption:"{caption}"},t)},setup:function(t){var a=this;o=$("<div>").attr({class:"masongram-container"}).appendTo(t),$("<div>").attr({class:"masongram-image-sizer masongram-image-size-"+n.size}).appendTo(o),o.masonry({itemSelector:".masongram-image-container",columnWidth:".masongram-image-sizer",percentPosition:!0}),e=new Resource(n),e.on("loaded",function(t){a.append(t)});var i;$(window).scroll(function(){i||(i=setTimeout(function(){o.imagesLoaded().progress(function(){$(window).scrollTop()+$(window).height()>$(document).height()*(1-n.offset/100)&&a.load()}),i=null},100))}),o.on("layoutComplete",function(){o.imagesLoaded().progress(function(){$("body").height()<$(window).height()&&a.load()})}),a.load()},load:function(){a||(a=!0,e.load())},append:function(t){t.forEach(function(e,i){var c=new Tile(e,{caption:n.caption,size:n.size}),r=c.getObject();setTimeout(function(){r.imagesLoaded().progress(function(){o.append(r).masonry("appended",r),i+1===t.length&&(a=!1,$(window).trigger("scroll"))})},200*i)})}},t}(),Resource=function(){function t(t){n=t,o="https://api.instagram.com/v1/"+n.endpoint+"/media/recent/"}var n,o;return t.prototype={load:function(){if(o){var t=this,e=$.Deferred();return $.ajax({type:"POST",url:o,data:{access_token:n.access_token,count:n.count},dataType:"jsonp"}).success(function(a){$(t).trigger("loaded",[a.data]),e.resolve(a.data),n.loop||(o=!(!a.pagination||!a.pagination.next_url)&&a.pagination.next_url)}).error(function(){e.reject("Error fetching data")}),e.promise()}},on:function(t,n){$(this).on(t,function(t,o){n(o)})}},t}(),Tile=function(){function t(t,n){o=t,e=n,this.parseLocation(),this.create()}var n,o,e,a="NO_DATA";return t.prototype={create:function(){n=$("<a>").attr({tabindex:0,class:"masongram-image-container masongram-image-size-"+e.size});var t=$("<img>").attr({src:o.images[e.size].url,width:o.images[e.size].width,height:o.images[e.size].height,class:"masongram-image"});t.appendTo(n);var a=$("<div>",{class:"masongram-image-caption-container"}),i=$("<div>",{class:"masongram-image-caption"});o.caption&&o.caption.text&&i.html(this.parseCaption()),i.appendTo(a),a.appendTo(n)},getObject:function(){return n},parseLocation:function(){if(o.caption&&o.caption.text&&/@[\d]+\.[\d]+,[\d]+\.[\d]+/.test(o.caption.text)){var t=o.caption.text.match(/@([\d]+\.[\d]+),([\d]+\.[\d]+)/);o.caption.text=o.caption.text.replace(/\s*@([\d]+\.[\d]+),([\d]+\.[\d]+)/,""),o.location={latitude:t[1],longitude:t[2]}}},parseCaption:function(){var t=e.caption;if(/{.*}/.test(t)){var n=t.match(/{([^}]+)}/g);n.forEach(function(n){switch(n){case"{location}":t=t.replace(n,o.location&&void 0!==o.location.latitude&&void 0!==o.location.longitude?o.location.latitude+","+o.location.longitude:a);break;case"{latitude}":t=t.replace(n,o.location&&void 0!==o.location.latitude?o.location.latitude:a);break;case"{longitude}":t=t.replace(n,o.location&&void 0!==o.location.longitude?o.location.longitude:a);break;case"{caption}":t=t.replace(n,o.caption&&void 0!==o.caption.text?o.caption.text:a);break;case"{likes}":t=t.replace(n,o.likes&&void 0!==o.likes.count?o.likes.count:a);break;case"{link}":t=t.replace(n,o.link?o.link:a)}})}return t}},t}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
